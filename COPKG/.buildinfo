@import "version.inc";

#product-info  {
	product-name: "libxml2";
	version: "2.7.8";
	original-source-location: "git://git.gnome.org/libxml2";
	original-source-website: "http://git.gnome.org/browse/libxml2/";
	license: "X11 license";
	packager: "Vincent Povirk <madewokherd@gmail.com>";
}

test {
    set: {
        COMP="${COMP??vc10}";
        PLAT="${PLAT??x86, x64}";
    };
    default : false;
    build-command: @"
        if ""${BUILT}"" neq ""true"" ptk release --nologo --COMP=""${COMP}"" --PLAT=""${PLAT}""
        
        REM Start tests here...
        for %%A in (${COMP}) do (
            for %%B in (${PLAT}) do (
                for %%E in (runtest.exe, runsuite.exe, testapi.exe, testThreadsWin32.exe) do (
                    coapp create-symlink %CD%\%%A-%%B\bin.msvc\%%E %CD%\%%E
                    REM mklink %%E .\%%A-%%B\bin.msvc\%%E
                    simplesigner --nologo --reference-assembly=""zlib[%%A], Version=1.2.5.0, PublicKeyToken=1e373a58e25250cb, ProcessorArchitecture=%%B"" --reference-assembly=""libiconv[%%A], Version=1.13.1.0, PublicKeyToken=1e373a58e25250cb, ProcessorArchitecture=%%B"" %%E || goto failed
                )
                coapp create-symlink %CD%\%%A-%%B\bin.msvc\libxml2.dll %CD%\libxml2.dll
                echo Running TestAPI...
                testapi.exe || goto failure
                echo Running TestThreadsWin32...
                testThreadsWin32.exe || goto failure
                REM echo Running RunTest...
                REM runtest.exe || goto failure
                REM echo Running RunSuite...
                REM runsuite.exe || goto failure
                for %%E in (runtest.exe, runsuite.exe, testapi.exe, testThreadsWin32.exe, libxml2.dll) do (
                    del %%E
                )
            )
        )
        goto :eof
        :failure
        for %%E in (runtest.exe, runsuite.exe, testapi.exe, testThreadsWin32.exe, libxml2.dll) do (
            del %%E
        )
        goto failed
        
    ";
};

package {
    
    default : false;
    uses : sign;
    
    set: {
        COMP="${COMP??vc10}";
        PLAT="${PLAT??x86, x64}";
    };

    targets: { 
        @"copkg\libxml2[vc10]-${package-version}-x86.msi",
        @"copkg\libxml2-dev[vc10]-${package-version}-x86.msi",
        @"copkg\libxml2-dev-common-${package-version}-any.msi",
        @"copkg\libxml2[vc10]-${package-version}-x64.msi",
        @"copkg\libxml2-dev[vc10]-${package-version}-x64.msi"
    };
    
    build-command : @"
        cd COPKG
        autopackage libxml2-dev-common.autopkg || goto failed
        for %%A in (${COMP}) do (
            for %%B in (${PLAT}) do (
                autopackage --COMP=%%A --PLAT=%%B libxml2.autopkg libxml2-dev.autopkg || goto failed
            )
        )
        ptk update-version
    ";

	clean-command: @"del COPKG\*.msi COPKG\*.wixpdb";
	
};


update-version {
    default : false;
    
    build-command : @"
        REM auto-increment version.inc file...
        
        cd COPKG
        setlocal EnableDelayedExpansion
        for /F ""tokens=4,5,6,7  delims=.; "" %%v in (version.inc) do (
            set /a build=%%y + 1
            set VERSTRING=#define { package-version: %%v.%%w.%%x.!build!; }
        )
        echo !VERSTRING! > version.inc
    ";
}

release {
    set: {
        BuildCfg="Release";
        COMP="${COMP??vc10}";
        PLAT="${PLAT??x86, x64}";
    };

    build-command: @"
        for %%A in (${COMP}) do (
            for %%B in (${PLAT}) do (
                ptk --nologo base --COMP=%%A --PLAT=%%B
            )
        )
    ";
    
    clean-command: @"
        for %%A in (${COMP}) do (
            for %%B in (${PLAT}) do (
                ptk --nologo clean base --COMP=%%A --PLAT=%%B
            )
        )
    ";
};

sign {
    default : false;
    build-command: @"
        if ""${BUILT}"" neq ""true"" ptk release --nologo --COMP=""${COMP}"" --PLAT=""${PLAT}""
        for %%A in (${COMP}) do (
            for %%B in (${PLAT}) do (
                simplesigner.exe --nologo --sign %%A-%%B\bin.msvc\**.dll %%A-%%B\bin.msvc\**.exe
            )
        )
        ";
};

x86-old {
    compiler: vc10;

    requires: "libiconv-dev[vc10]-1.13.1-x86-1e373a58e25250cb";
    requires: "zlib-dev[vc10]-1.2.5-x86-1e373a58e25250cb";
    
    targets: {
		"win32\bin.msvc\libxml2.dll",
		"win32\bin.msvc\libxml2.lib",
		"win32\bin.msvc\libxml2_a.lib",
		"win32\bin.msvc\libxml2_a_dll.lib",
		"win32\bin.msvc\xmlcatalog.exe",
		"win32\bin.msvc\xmllint.exe",
	};
	
    build-command:@"
        REM this makes it so that DLLs can have their own SxS Activation Context in an embedded resource.
		echo %_CL% | findstr ISOLATION_AWARE || set _CL=%CL% /D ISOLATION_AWARE_ENABLED

        cd win32
		cscript configure.js zlib=yes ""include=%AllUsersProfile%/include/libiconv;%AllUsersProfile%/include/zlib"" ""lib=%AllUsersProfile%/lib/x86""
		nmake /f Makefile.msvc
	";
    
    clean-command:@"
		rem We can't do a make clean because it'll fail without configure.
		erase config.h > nul 2> nul
		erase include\libxml\xmlversion.h > nul 2> nul
		erase win32\Makefile > nul 2> nul
		erase win32\config.msvc > nul 2> nul
        if exist win32\bin.msvc rmdir /s /q win32\bin.msvc > nul 2> nul
        if exist win32\int.a.dll.msvc rmdir /s /q win32\int.a.dll.msvc > nul 2> nul
        if exist win32\int.a.msvc rmdir /s /q win32\int.a.msvc > nul 2> nul
        if exist win32\int.msvc rmdir /s /q win32\int.msvc > nul 2> nul
        if exist win32\int.utils.msvc rmdir /s /q win32\int.utils.msvc > nul 2> nul
    ";
};

base {
    set: {
        COMP="${COMP??vc10}";
        PLAT="${PLAT??x86}";
    };
    
    compiler: "${COMP}";
    platform: "${PLAT}";

    requires: "libiconv-dev[${COMP}]-1.13.1-${PLAT}-1e373a58e25250cb";
    requires: "zlib-dev[${COMP}]-1.2.5-${PLAT}-1e373a58e25250cb";
    
    targets: {
		"${COMP}-${PLAT}\bin.msvc\libxml2.dll",
		"${COMP}-${PLAT}\bin.msvc\libxml2.lib",
		"${COMP}-${PLAT}\bin.msvc\libxml2_a.lib",
		"${COMP}-${PLAT}\bin.msvc\libxml2_a_dll.lib",
		"${COMP}-${PLAT}\bin.msvc\xmlcatalog.exe",
		"${COMP}-${PLAT}\bin.msvc\xmllint.exe",
	};
	
    build-command:@"
        REM this makes it so that DLLs can have their own SxS Activation Context in an embedded resource.
        echo %CL% | findstr ISOLATION_AWARE || set CL=%CL% -D ISOLATION_AWARE_ENABLED

        mkdir ${COMP}-${PLAT}
            copy win32\wince ${COMP}-${PLAT}\wince
            copy win32\configure.js ${COMP}-${PLAT}\configure.js 
            copy win32\defgen.xsl ${COMP}-${PLAT}\defgen.xsl 
            copy win32\libxml2.def.src ${COMP}-${PLAT}\libxml2.def.src 
            copy win32\Makefile.msvc ${COMP}-${PLAT}\Makefile.msvc

        pushd ${COMP}-${PLAT}
            cscript configure.js zlib=yes ""include=%AllUsersProfile%/include/libiconv;%AllUsersProfile%/include/zlib"" ""lib=%AllUsersProfile%/lib/${PLAT}""
            nmake /f Makefile.msvc
        popd
	";
    
    clean-command:@"
		rem We can't do a make clean because it'll fail without configure.
		erase config.h > nul 2> nul
		erase include\libxml\xmlversion.h > nul 2> nul
        if exist ${COMP}-${PLAT} rmdir /s /q ${COMP}-${PLAT} > nul 2> nul
    ";
};

